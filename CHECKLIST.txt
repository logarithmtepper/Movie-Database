Viewing People
-If a user follows a person,
	the user should receive a notification any time a new movie is added to the database that involves this person, or any time this person is added to an existing movie.

Viewing Other Users
[should work now] -Error when trying to view second user on list of users
-If a user X follows a user Y, user X should receive a notification any time user Y creates a new review

Contributing Users
-Error picking collaborators properly with newly added people
[solved] -Error displaying people on moviepage when adding new movie
-Error displaying similar movie on moviepage when adding new movie
[solved] -Addmovie page does not have plot entry section
-Error: new added movies not displaying on movieList

REST API
In addition to the web-based client that most users will use, your movie database application must also provide a public JSON REST API that supports the following routes and parameters, at minimum:
1.	GET /movies – Allows searching for movies in the database. Returns an array of movies that match the query constraints. Must support at least the following query parameters:
	a.	title – A string that should be considered a match for any movie that has a title containing the given string title (character case should be ignored).
			If no value is given for this parameter, all movies should match the title constraint.
	b.	genre – A string that should be considered a match if the movie’s list of genre keywords contains the given keyword.
			If no value is given for this parameter, all movies should match the genre constraint.
	c.	year – A number that should be considered a match if the movie’s release year matches.
			If no value is given for this parameter, all movies should match the year constraint.
	d.	minrating – A number that should be considered a match if the movie’s overall average review rating on your site is greater than or equal to the given value.
			If a movie does not have any reviews, the number value of its rating should be considered 0.
2.	GET /movies/:movie – Allows retrieving information about a specific movie with the unique ID movie, assuming it is a valid ID.
		The returned JSON should contain the basic movie information (title, year, actors, etc.) and also information about the reviews of the movie.
3.	POST /movies – Allows a new movie to be added into the database. It will accept a JSON representation of a movie and is responsible for checking the data is valid before adding it to the database.
		Your documentation should specify the required data and expected format. If a person is specified as a writer/director/actor within the movie but does not currently exist in the database,
		a new person should be created and added to the database.
4.	GET /people – Allows searching for people within the movie database. At minimum, this must support an optional name query parameter. If the query parameter is included,
		it should return any person in the database whose name contains the given name parameter. The search should also be  in a case-insensitive nature.
		If no parameter is given, all people should match the query.
5.	GET /people/:person – Retrieves the person with the given unique ID, if they exist. This should include, at minimum, the name of the person and the movies they have been a part of.
6.	GET /users – Allows searching the users of the application. At minimum, this must support an optional name query parameter.
		If the query parameter is included, it should return any user in the database whose name contains the given name parameter. The search should also be  in a case-insensitive nature.
		If the parameter is not specified, any user should match the search constraint.
7.	GET /users/:user – Get information about the user with the given unique ID, if they exist.
		This should contain their username, their account status (regular user or contributing user) and the reviews the user has made.

Pair Project Extensions
it is recommended that you include at least 3 of the below extensions into your project,
or similar extensions you come up with on your own. For those looking for an A grade on the project,
pairs are encouraged to include more than the minimum recommended extensions and individuals are encouraged to include some extensions as well.
1.	Use React, Angular, or another supported frontend framework.
2.	Implement a GraphQL API in addition to the REST API.
3.	Implement your own load balancing solution and simulate a distributed system by instantiating multiple instances of your server.
	This load balancer should be able to detect any of the servers going offline (e.g., simulating a machine crash). This load balancer could also handle the addition of more servers at runtime.
4.	Support a full-sized/desktop interface, as well as a smaller, mobile-friendly interface.
5.	Provide in-depth automated testing of your API and system, including documenting specific test cases and their expected results.
6.	Implement your own caching mechanism for your server/API. Test your caching system under various circumstances and compare its performance to a version that does not use caching.
7.	Implement a web-scraper to retrieve additional movie data from IMDB and incorporate it into your system.
	You could do this in an automated way (e.g., like a web crawler) or by allowing a user to provide an IMDB URL to have a specific movie parsed.
	If your parser is error-prone, you could also use this feature to initially populate a form on the page and have the user double-check the information manually before it is submitted to the database.
IDEAS:
web scrubber to get images for each person

Project Report
1. Provide instructions for the TA describing how to log in to your OpenStack instance and start your server.
	a. Include your instance information including the public IP, instance name, and instance username/password.
	b. Provide steps required to start the database or any other supporting software.
	c. Provide any initialization steps the TA must take (e.g., running a database initialization script).
	d. Provide instructions to run your server.
	e. Everything should be installed already, the TA should not have to install modules, etc.
2. Provide a summary of what functionality you have implemented successfully and what functionality you have not implemented.
3. Describe any extensions you included beyond the required specification.
4. Discuss any design decisions you made that you believe increase the overall quality of your system.
	Some important things to think about in this regard include the scalability, robustness, and user experience.
5. Discuss any improvements to your system that you think could be made to increase its overall quality.
	This is an opportunity to demonstrate your understanding of course concepts that you feel were not adequately demonstrated in your project
6. Identify any modules, frameworks, or other tools that you used and justify their use.
7. What do you like most about your project? What would you say is the best feature(s)?

DONE: *******************************************************************************************************************************
User Accounts
-provide a way for users to create new accounts
-A user can log in and out using username and password
-only a single user should be able to be logged in at one time
-newly accounts considered regular users until upgraded to contributing user
-Change between ‘regular’ user account and a ‘contributing’ user account.
-Search for movies by title, name, and/or genre keyword, at minimum.
-follow/unfollow other users and people
-Usernames must be unique
-View and manage the people they follow.
	The user should be able to navigate to the personal page of any person they have followed.
	The user should be able to stop following any person that they have followed.
-View and manage the other users they follow.
	The user should be able to navigate to the user page of any user they have followed. The user should be able to stop following any user that they have followed.

Viewing Movies
-See the basic movie information
-See the genre keywords
	user can navigate to search results of movies with that genre keyword
-See the director, writer, and actors the movie has
	allow the user to navigate directly to each person’s page.
-See a list of similar movies to this one
	allow the user to navigate to the page for any of those movies.
-See movie reviews that have been added for the movie.
-Add a basic review by specifying a score out of 10.
-Add full review by specifying out of 10, a brief summary, and a full review text.

Viewing People (directors, writers, actors)
-See a history of all of this person’s work
	Each movie entry should allow the user to navigate to that movie’s page
-See a list of frequent collaborators of this person.
	list of people this person has worked with the most
-Choose to follow this person.
	If a user follows a person,
	the user should receive a notification any time a new movie is added to the database that involves this person, or any time this person is added to an existing movie.

Viewing Other Users
-See their followed person
-See a list of all of the reviews this user has made
	and be able to read each full review

Contributing Users
-Add a new person to the database by specifying their name.
	If the name already exists, the user should not be able to add the new person.
-When viewing a movie, be able to edit the movie by adding people
	user should only be allowed to add people to a movie if that person exists in the database already
